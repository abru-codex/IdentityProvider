@model IdentityProvider.Models.ViewModels.UserDetailsViewModel
@{
    ViewData["Title"] = "User Details";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><i class="bi bi-person-circle"></i> User Details</h2>
            <div>
                <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-primary">
                    <i class="bi bi-pencil"></i> Edit User
                </a>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Basic Information</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-3">
                        <strong>User ID:</strong>
                    </div>
                    <div class="col-sm-9">
                        <code>@Model.Id</code>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-3">
                        <strong>Username:</strong>
                    </div>
                    <div class="col-sm-9">
                        @Model.UserName
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-3">
                        <strong>Email:</strong>
                    </div>
                    <div class="col-sm-9">
                        @Model.Email
                        @if (Model.EmailConfirmed)
                        {
                            <i class="bi bi-check-circle-fill text-success ms-1" title="Email Verified"></i>
                        }
                        else
                        {
                            <i class="bi bi-exclamation-circle text-warning ms-1" title="Email Not Verified"></i>
                        }
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-3">
                        <strong>Phone Number:</strong>
                    </div>
                    <div class="col-sm-9">
                        @(Model.PhoneNumber ?? "Not provided")
                        @if (Model.PhoneNumberConfirmed)
                        {
                            <i class="bi bi-check-circle-fill text-success ms-1" title="Phone Verified"></i>
                        }
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-3">
                        <strong>Status:</strong>
                    </div>
                    <div class="col-sm-9">
                        @if (Model.LockoutEnd != null && Model.LockoutEnd > DateTimeOffset.UtcNow)
                        {
                            <span class="badge bg-danger">Locked until @Model.LockoutEnd?.ToString("MMM dd, yyyy HH:mm")</span>
                        }
                        else if (Model.EmailConfirmed)
                        {
                            <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                            <span class="badge bg-warning">Unverified</span>
                        }
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-3">
                        <strong>Two-Factor:</strong>
                    </div>
                    <div class="col-sm-9">
                        @if (Model.TwoFactorEnabled)
                        {
                            <span class="badge bg-success">Enabled</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Disabled</span>
                        }
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-sm-3">
                        <strong>Failed Logins:</strong>
                    </div>
                    <div class="col-sm-9">
                        @Model.AccessFailedCount
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h5 class="card-title mb-0">Roles</h5>
            </div>
            <div class="card-body">
                @if (Model.Roles.Any())
                {
                    @foreach (var role in Model.Roles)
                    {
                        <span class="badge bg-primary me-2 mb-2">@role</span>
                    }
                }
                else
                {
                    <p class="text-muted">No roles assigned</p>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h6 class="card-title mb-0">Quick Actions</h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-warning" onclick="resetPassword('@Model.Id')">
                        <i class="bi bi-key"></i> Reset Password
                    </button>
                    
                    @if (Model.LockoutEnd != null && Model.LockoutEnd > DateTimeOffset.UtcNow)
                    {
                        <form method="post" action="@Url.Action("ToggleLockout", new { id = Model.Id })" class="d-inline">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-success w-100">
                                <i class="bi bi-unlock"></i> Unlock User
                            </button>
                        </form>
                    }
                    else
                    {
                        <form method="post" action="@Url.Action("ToggleLockout", new { id = Model.Id })" class="d-inline">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-warning w-100">
                                <i class="bi bi-lock"></i> Lock User
                            </button>
                        </form>
                    }
                    
                    <button type="button" class="btn btn-danger" onclick="confirmDelete('@Model.Id', '@Model.UserName')">
                        <i class="bi bi-trash"></i> Delete User
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reset Password Modal -->
<div class="modal fade" id="resetPasswordModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reset Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <input type="password" class="form-control" id="newPassword" required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitPasswordReset()">Reset Password</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete user <strong id="deleteUserName"></strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display: inline;">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentUserId = '';
        
        function resetPassword(userId) {
            currentUserId = userId;
            new bootstrap.Modal(document.getElementById('resetPasswordModal')).show();
        }
        
        function submitPasswordReset() {
            const newPassword = document.getElementById('newPassword').value;
            if (!newPassword) {
                alert('Please enter a new password');
                return;
            }
            
            fetch(`@Url.Action("ResetPassword")/${currentUserId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `newPassword=${encodeURIComponent(newPassword)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Password reset successfully!');
                    bootstrap.Modal.getInstance(document.getElementById('resetPasswordModal')).hide();
                } else {
                    alert('Failed to reset password: ' + data.errors.join(', '));
                }
            })
            .catch(error => {
                alert('An error occurred while resetting the password');
            });
        }
        
        function confirmDelete(userId, userName) {
            document.getElementById('deleteUserName').textContent = userName;
            document.getElementById('deleteForm').action = '@Url.Action("Delete")/' + userId;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }
    </script>
}